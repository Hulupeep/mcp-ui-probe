import { z } from 'zod';

// Core Journey Types
export const JourneyStepSchema = z.object({
  id: z.string(),
  action: z.enum(['click', 'fill', 'select', 'navigate', 'wait', 'assert', 'upload', 'drag_drop']),
  selector: z.string().optional(),
  value: z.any().optional(),
  description: z.string(),
  timestamp: z.string(),
  url: z.string(),
  waitAfter: z.number().optional(),
  screenshot: z.string().optional(),
  metadata: z.record(z.any()).optional()
});

export const StartingContextSchema = z.object({
  urlPattern: z.string(),
  exactUrl: z.string().optional(),
  requiredElements: z.array(z.object({
    selector: z.string(),
    type: z.enum(['container', 'button', 'input', 'form', 'text', 'image']),
    description: z.string().optional()
  })),
  pageState: z.object({
    loggedIn: z.boolean().optional(),
    cartItems: z.number().optional(),
    userRole: z.string().optional(),
    customChecks: z.record(z.any()).optional()
  }).optional(),
  minContentLength: z.number().optional(),
  maxLoadTime: z.number().optional()
});

export const FallbackStrategySchema = z.object({
  selectorChanges: z.array(z.object({
    original: z.string(),
    alternatives: z.array(z.string())
  })).optional(),
  retryStrategies: z.array(z.enum(['wait', 'reload', 'navigate_back', 'skip_step'])).optional(),
  aiSelfHealing: z.boolean().default(true)
});

export const JourneyMetadataSchema = z.object({
  author: z.string().default('AI-Generated'),
  version: z.string().default('1.0.0'),
  successRate: z.number().min(0).max(1).default(0),
  avgDurationMs: z.number().default(0),
  usageCount: z.number().default(0),
  lastUsed: z.string().optional(),
  difficulty: z.enum(['easy', 'medium', 'hard']).default('medium'),
  environment: z.array(z.enum(['desktop', 'mobile', 'tablet'])).default(['desktop']),
  browserCompatibility: z.array(z.string()).default(['chromium'])
});

export const JourneySchema = z.object({
  id: z.string(),
  name: z.string(),
  description: z.string(),
  tags: z.array(z.string()).default([]),
  category: z.string().optional(),
  createdAt: z.string(),
  updatedAt: z.string(),
  startingContext: StartingContextSchema,
  steps: z.array(JourneyStepSchema),
  metadata: JourneyMetadataSchema,
  fallbackStrategies: FallbackStrategySchema.optional(),
  variables: z.record(z.string()).optional(), // For templating like {{user.email}}
  expectedResults: z.object({
    finalUrl: z.string().optional(),
    expectedElements: z.array(z.string()).optional(),
    successIndicators: z.array(z.string()).optional(),
    errorIndicators: z.array(z.string()).optional()
  }).optional()
});

// Recording Configuration
export const RecordingConfigSchema = z.object({
  captureScreenshots: z.boolean().default(true),
  captureNetworkRequests: z.boolean().default(false),
  ignoredSelectors: z.array(z.string()).default([]),
  minimumActionDelay: z.number().default(500), // ms
  autoGenerateName: z.boolean().default(true),
  autoGenerateDescription: z.boolean().default(true),
  smartSelectorGeneration: z.boolean().default(true)
});

// Playback Configuration
export const PlaybackConfigSchema = z.object({
  speed: z.number().min(0.1).max(5.0).default(1.0),
  pauseOnError: z.boolean().default(true),
  maxRetries: z.number().default(3),
  screenshotOnFailure: z.boolean().default(true),
  continueOnNonCriticalErrors: z.boolean().default(true),
  validateContext: z.boolean().default(true),
  timeoutMs: z.number().default(30000)
});

// Journey Execution Result
export const JourneyExecutionResultSchema = z.object({
  journeyId: z.string(),
  executionId: z.string(),
  startTime: z.string(),
  endTime: z.string(),
  durationMs: z.number(),
  success: z.boolean(),
  completedSteps: z.number(),
  totalSteps: z.number(),
  errors: z.array(z.object({
    stepId: z.string(),
    error: z.string(),
    context: z.record(z.any()).optional()
  })),
  warnings: z.array(z.string()),
  screenshots: z.array(z.string()),
  finalUrl: z.string(),
  contextValidation: z.object({
    passed: z.boolean(),
    details: z.record(z.any())
  }).optional()
});

// Search and Discovery Types
export const JourneySearchCriteriaSchema = z.object({
  query: z.string().optional(),
  tags: z.array(z.string()).optional(),
  category: z.string().optional(),
  domain: z.string().optional(),
  dateRange: z.object({
    from: z.string(),
    to: z.string()
  }).optional(),
  minSuccessRate: z.number().min(0).max(1).optional(),
  maxDuration: z.number().optional(),
  difficulty: z.array(z.enum(['easy', 'medium', 'hard'])).optional(),
  sortBy: z.enum(['name', 'created', 'used', 'success_rate', 'duration']).default('created'),
  sortOrder: z.enum(['asc', 'desc']).default('desc'),
  limit: z.number().default(10)
});

export const JourneySearchResultSchema = z.object({
  journeys: z.array(z.object({
    id: z.string(),
    name: z.string(),
    description: z.string(),
    tags: z.array(z.string()),
    category: z.string().optional(),
    createdAt: z.string(),
    metadata: JourneyMetadataSchema,
    relevanceScore: z.number().optional()
  })),
  totalCount: z.number(),
  hasMore: z.boolean()
});

// AI Analysis Types
export const JourneyAnalysisSchema = z.object({
  suggestedName: z.string(),
  suggestedDescription: z.string(),
  suggestedTags: z.array(z.string()),
  suggestedCategory: z.string().optional(),
  estimatedDifficulty: z.enum(['easy', 'medium', 'hard']),
  potentialIssues: z.array(z.string()),
  optimizationSuggestions: z.array(z.string()),
  similarJourneys: z.array(z.string())
});


export const JourneySearchFiltersSchema = z.object({
  category: z.string().optional(),
  tags: z.array(z.string()).optional(),
  domain: z.string().optional(),
  minSuccessRate: z.number().min(0).max(1).optional(),
  maxDuration: z.number().optional(),
  difficulty: z.array(z.string()).optional(), // Changed to string array
  createdAfter: z.date().optional(),
  createdBefore: z.date().optional(),
  sortBy: z.enum(['name', 'created', 'used', 'success_rate', 'duration']).optional(),
  sortOrder: z.enum(['asc', 'desc']).optional(),
  limit: z.number().default(10)
});

export type JourneySearchFilters = z.infer<typeof JourneySearchFiltersSchema>;

// Type exports
export type Journey = z.infer<typeof JourneySchema>;
export type JourneyStep = z.infer<typeof JourneyStepSchema>;
export type StartingContext = z.infer<typeof StartingContextSchema>;
export type FallbackStrategy = z.infer<typeof FallbackStrategySchema>;
export type JourneyMetadata = z.infer<typeof JourneyMetadataSchema>;
export type RecordingConfig = z.infer<typeof RecordingConfigSchema>;
export type PlaybackConfig = z.infer<typeof PlaybackConfigSchema>;
export type JourneyExecutionResult = z.infer<typeof JourneyExecutionResultSchema>;
export type JourneySearchCriteria = z.infer<typeof JourneySearchCriteriaSchema>;
export type JourneySearchResult = z.infer<typeof JourneySearchResultSchema>;
export type JourneyAnalysis = z.infer<typeof JourneyAnalysisSchema>;

// Journey Events for real-time updates
export interface JourneyEvent {
  type: 'step_started' | 'step_completed' | 'step_failed' | 'journey_paused' | 'journey_resumed' | 'journey_completed' | 'step_recorded' | 'playback_started' | 'playback_completed';
  journeyId: string;
  executionId?: string;
  stepId?: string;
  data?: any;
  timestamp: string;
}

// Journey Collection for organizing journeys
export interface JourneyCollection {
  id: string;
  name: string;
  description: string;
  journeyIds: string[];
  tags: string[];
  createdAt: string;
  updatedAt: string;
}

// Configuration for journey directory structure
export interface JourneyStorageConfig {
  baseDir: string; // ~/.ui-probe/journeys/
  collectionsDir: string; // collections/
  templatesDir: string; // templates/
  backupsDir: string; // backups/
  indexFile: string; // index.json
  maxBackups: number;
  compressionEnabled: boolean;
}

// Context validation result
export interface ContextValidationResult {
  isValid: boolean;
  missingElements: string[];
  urlMismatch: boolean;
  stateIssues: string[];
  suggestions: string[];
  alternativeJourneys: string[];
}

// Journey template for creating reusable patterns
export interface JourneyTemplate {
  id: string;
  name: string;
  description: string;
  pattern: Partial<Journey>;
  variables: Array<{
    name: string;
    type: 'string' | 'number' | 'boolean' | 'select';
    description: string;
    default?: any;
    options?: any[];
    required: boolean;
  }>;
  category: string;
  tags: string[];
}